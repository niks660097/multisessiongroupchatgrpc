// Code generated by protoc-gen-go. DO NOT EDIT.
// source: genericChat.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserRequestType int32

const (
	UserRequestType_REGISTER_USER        UserRequestType = 0
	UserRequestType_START_SESSION        UserRequestType = 1
	UserRequestType_LIST_ALL_USERS       UserRequestType = 3
	UserRequestType_LIST_CONNECTED_USERS UserRequestType = 4
)

var UserRequestType_name = map[int32]string{
	0: "REGISTER_USER",
	1: "START_SESSION",
	3: "LIST_ALL_USERS",
	4: "LIST_CONNECTED_USERS",
}

var UserRequestType_value = map[string]int32{
	"REGISTER_USER":        0,
	"START_SESSION":        1,
	"LIST_ALL_USERS":       3,
	"LIST_CONNECTED_USERS": 4,
}

func (x UserRequestType) String() string {
	return proto.EnumName(UserRequestType_name, int32(x))
}

func (UserRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{0}
}

type RecvOk_RecvType int32

const (
	RecvOk_SERVER_RECEIVED RecvOk_RecvType = 0
	RecvOk_USER_RECEIVED   RecvOk_RecvType = 1
)

var RecvOk_RecvType_name = map[int32]string{
	0: "SERVER_RECEIVED",
	1: "USER_RECEIVED",
}

var RecvOk_RecvType_value = map[string]int32{
	"SERVER_RECEIVED": 0,
	"USER_RECEIVED":   1,
}

func (x RecvOk_RecvType) String() string {
	return proto.EnumName(RecvOk_RecvType_name, int32(x))
}

func (RecvOk_RecvType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{1, 0}
}

type UserMessage struct {
	UserSecret           string   `protobuf:"bytes,1,opt,name=user_secret,json=userSecret,proto3" json:"user_secret,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Message              *Message `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	MessageId            string   `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SessionSecret        string   `protobuf:"bytes,5,opt,name=session_secret,json=sessionSecret,proto3" json:"session_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMessage) Reset()         { *m = UserMessage{} }
func (m *UserMessage) String() string { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()    {}
func (*UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{0}
}

func (m *UserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMessage.Unmarshal(m, b)
}
func (m *UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMessage.Marshal(b, m, deterministic)
}
func (m *UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMessage.Merge(m, src)
}
func (m *UserMessage) XXX_Size() int {
	return xxx_messageInfo_UserMessage.Size(m)
}
func (m *UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UserMessage proto.InternalMessageInfo

func (m *UserMessage) GetUserSecret() string {
	if m != nil {
		return m.UserSecret
	}
	return ""
}

func (m *UserMessage) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UserMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *UserMessage) GetSessionSecret() string {
	if m != nil {
		return m.SessionSecret
	}
	return ""
}

type RecvOk struct {
	RecvType             RecvOk_RecvType `protobuf:"varint,1,opt,name=recv_type,json=recvType,proto3,enum=protos.RecvOk_RecvType" json:"recv_type,omitempty"`
	MessageId            string          `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	RecvUsername         string          `protobuf:"bytes,3,opt,name=recv_username,json=recvUsername,proto3" json:"recv_username,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RecvOk) Reset()         { *m = RecvOk{} }
func (m *RecvOk) String() string { return proto.CompactTextString(m) }
func (*RecvOk) ProtoMessage()    {}
func (*RecvOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{1}
}

func (m *RecvOk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvOk.Unmarshal(m, b)
}
func (m *RecvOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvOk.Marshal(b, m, deterministic)
}
func (m *RecvOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvOk.Merge(m, src)
}
func (m *RecvOk) XXX_Size() int {
	return xxx_messageInfo_RecvOk.Size(m)
}
func (m *RecvOk) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvOk.DiscardUnknown(m)
}

var xxx_messageInfo_RecvOk proto.InternalMessageInfo

func (m *RecvOk) GetRecvType() RecvOk_RecvType {
	if m != nil {
		return m.RecvType
	}
	return RecvOk_SERVER_RECEIVED
}

func (m *RecvOk) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *RecvOk) GetRecvUsername() string {
	if m != nil {
		return m.RecvUsername
	}
	return ""
}

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{2}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UserRequest struct {
	Type                 UserRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=protos.UserRequestType" json:"type,omitempty"`
	Username             string          `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	UserIds              []string        `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{3}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetType() UserRequestType {
	if m != nil {
		return m.Type
	}
	return UserRequestType_REGISTER_USER
}

func (m *UserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type UserReqResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Status               bool     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReqResponse) Reset()         { *m = UserReqResponse{} }
func (m *UserReqResponse) String() string { return proto.CompactTextString(m) }
func (*UserReqResponse) ProtoMessage()    {}
func (*UserReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cc09492b18c0da, []int{4}
}

func (m *UserReqResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReqResponse.Unmarshal(m, b)
}
func (m *UserReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReqResponse.Marshal(b, m, deterministic)
}
func (m *UserReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReqResponse.Merge(m, src)
}
func (m *UserReqResponse) XXX_Size() int {
	return xxx_messageInfo_UserReqResponse.Size(m)
}
func (m *UserReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserReqResponse proto.InternalMessageInfo

func (m *UserReqResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *UserReqResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterEnum("protos.UserRequestType", UserRequestType_name, UserRequestType_value)
	proto.RegisterEnum("protos.RecvOk_RecvType", RecvOk_RecvType_name, RecvOk_RecvType_value)
	proto.RegisterType((*UserMessage)(nil), "protos.UserMessage")
	proto.RegisterType((*RecvOk)(nil), "protos.RecvOk")
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*UserRequest)(nil), "protos.UserRequest")
	proto.RegisterType((*UserReqResponse)(nil), "protos.UserReqResponse")
}

func init() { proto.RegisterFile("genericChat.proto", fileDescriptor_32cc09492b18c0da) }

var fileDescriptor_32cc09492b18c0da = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xf5, 0x46, 0xae, 0x63, 0x8f, 0xe3, 0x8f, 0x6c, 0x4a, 0xaa, 0x1a, 0x4a, 0x8d, 0x42, 0xc1,
	0x6d, 0x21, 0x14, 0xb7, 0x87, 0xf6, 0x54, 0x82, 0xb3, 0x14, 0x81, 0x63, 0xc3, 0xae, 0x9c, 0xab,
	0x50, 0xad, 0x21, 0x15, 0xad, 0x65, 0x67, 0x57, 0x36, 0xe4, 0x8f, 0xf5, 0xd2, 0xff, 0xd0, 0xdf,
	0x54, 0xf6, 0x43, 0x6e, 0x6c, 0x4c, 0x4e, 0xda, 0x79, 0x3b, 0xfb, 0xe6, 0xcd, 0x9b, 0x11, 0x9c,
	0xde, 0x61, 0x8e, 0x32, 0x9b, 0x8f, 0x7e, 0x24, 0xc5, 0xe5, 0x4a, 0x2e, 0x8b, 0x25, 0xad, 0x99,
	0x8f, 0x0a, 0xfe, 0x10, 0x68, 0xce, 0x14, 0xca, 0x1b, 0x54, 0x2a, 0xb9, 0x43, 0xfa, 0x1a, 0x9a,
	0x6b, 0x85, 0x32, 0x56, 0x38, 0x97, 0x58, 0xf8, 0xa4, 0x4f, 0x06, 0x0d, 0x0e, 0x1a, 0x12, 0x06,
	0xa1, 0x3d, 0xa8, 0xeb, 0x28, 0x4f, 0x16, 0xe8, 0x1f, 0x99, 0xdb, 0x6d, 0x4c, 0xdf, 0xc2, 0xf1,
	0xc2, 0xf2, 0xf8, 0x5e, 0x9f, 0x0c, 0x9a, 0xc3, 0x8e, 0xad, 0xa6, 0x2e, 0x1d, 0x3d, 0x2f, 0xef,
	0xe9, 0x2b, 0x00, 0x77, 0x8c, 0xb3, 0xd4, 0xaf, 0x1a, 0xa2, 0x86, 0x43, 0xc2, 0x94, 0xbe, 0x81,
	0xb6, 0x42, 0xa5, 0xb2, 0x65, 0x5e, 0x2a, 0x79, 0x66, 0x52, 0x5a, 0x0e, 0xb5, 0x62, 0x82, 0xdf,
	0x04, 0x6a, 0x1c, 0xe7, 0x9b, 0xe9, 0x4f, 0xfa, 0x09, 0x1a, 0x12, 0xe7, 0x9b, 0xb8, 0x78, 0x58,
	0xa1, 0x91, 0xdd, 0x1e, 0xbe, 0x28, 0xab, 0xdb, 0x14, 0xf3, 0x89, 0x1e, 0x56, 0xc8, 0xeb, 0xd2,
	0x9d, 0xf6, 0x64, 0x1c, 0xed, 0xcb, 0xb8, 0x80, 0x96, 0x21, 0xdd, 0x76, 0xec, 0x99, 0x8c, 0x13,
	0x0d, 0xce, 0x1c, 0x16, 0x0c, 0xa1, 0x5e, 0x32, 0xd3, 0x33, 0xe8, 0x08, 0xc6, 0x6f, 0x19, 0x8f,
	0x39, 0x1b, 0xb1, 0xf0, 0x96, 0x5d, 0x77, 0x2b, 0xf4, 0x14, 0x5a, 0x33, 0xf1, 0x18, 0x22, 0xc1,
	0x05, 0x1c, 0x97, 0x8e, 0xfb, 0xff, 0x4d, 0xb3, 0x6e, 0x97, 0x61, 0x70, 0x6f, 0x47, 0xc3, 0xf1,
	0x7e, 0x8d, 0xaa, 0xa0, 0xef, 0xa1, 0x7a, 0xa8, 0xb9, 0x47, 0x29, 0xa6, 0x39, 0x93, 0xf4, 0xe4,
	0x98, 0x5e, 0xda, 0xbb, 0x38, 0x4b, 0x95, 0xef, 0xf5, 0x3d, 0x5d, 0x52, 0xc7, 0x61, 0xaa, 0x02,
	0x06, 0x1d, 0xc7, 0xc7, 0x51, 0xad, 0x96, 0xb9, 0x32, 0x4c, 0xd2, 0x9d, 0x9d, 0xc0, 0x6d, 0x4c,
	0xcf, 0xa1, 0xa6, 0x8a, 0xa4, 0x58, 0x2b, 0x53, 0xa3, 0xce, 0x5d, 0xf4, 0x0e, 0xb7, 0x34, 0xa5,
	0x2c, 0x6d, 0x02, 0x67, 0xdf, 0x42, 0x11, 0x31, 0x1e, 0x6b, 0x37, 0xac, 0x2f, 0x22, 0xba, 0xe2,
	0x51, 0x2c, 0x98, 0x10, 0xe1, 0x74, 0xd2, 0x25, 0x94, 0x42, 0x7b, 0x1c, 0x8a, 0x28, 0xbe, 0x1a,
	0x8f, 0x4d, 0x96, 0xe8, 0x7a, 0xd4, 0x87, 0xe7, 0x06, 0x1b, 0x4d, 0x27, 0x13, 0x36, 0x8a, 0xd8,
	0xb5, 0xbb, 0xa9, 0x0e, 0xff, 0x12, 0x38, 0xbf, 0x59, 0xff, 0x2a, 0x32, 0x61, 0xb7, 0x42, 0xef,
	0xb7, 0x40, 0xb9, 0x41, 0x49, 0xbf, 0xea, 0xc9, 0x99, 0xea, 0x0e, 0x38, 0x3b, 0xe0, 0x57, 0x6f,
	0xdf, 0xc4, 0xb2, 0xe9, 0xa0, 0x42, 0xbf, 0xc0, 0x89, 0xc2, 0x3c, 0x45, 0x29, 0x0a, 0x89, 0xc9,
	0x62, 0xf7, 0xbd, 0x9b, 0x5d, 0xaf, 0xbd, 0xbb, 0x61, 0x41, 0x65, 0x40, 0x3e, 0x10, 0xfa, 0x19,
	0x9a, 0x7a, 0x41, 0xca, 0x97, 0x7b, 0x49, 0xbd, 0x43, 0x4c, 0xf6, 0xe5, 0x77, 0xfb, 0x57, 0x7e,
	0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x01, 0x5c, 0x57, 0xa9, 0xb1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MultiSessionChatServerClient is the client API for MultiSessionChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiSessionChatServerClient interface {
	RequestServer(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReqResponse, error)
	SenderStream(ctx context.Context, opts ...grpc.CallOption) (MultiSessionChatServer_SenderStreamClient, error)
	RecvrStream(ctx context.Context, opts ...grpc.CallOption) (MultiSessionChatServer_RecvrStreamClient, error)
}

type multiSessionChatServerClient struct {
	cc *grpc.ClientConn
}

func NewMultiSessionChatServerClient(cc *grpc.ClientConn) MultiSessionChatServerClient {
	return &multiSessionChatServerClient{cc}
}

func (c *multiSessionChatServerClient) RequestServer(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReqResponse, error) {
	out := new(UserReqResponse)
	err := c.cc.Invoke(ctx, "/protos.MultiSessionChatServer/requestServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiSessionChatServerClient) SenderStream(ctx context.Context, opts ...grpc.CallOption) (MultiSessionChatServer_SenderStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiSessionChatServer_serviceDesc.Streams[0], "/protos.MultiSessionChatServer/senderStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiSessionChatServerSenderStreamClient{stream}
	return x, nil
}

type MultiSessionChatServer_SenderStreamClient interface {
	Send(*UserMessage) error
	Recv() (*RecvOk, error)
	grpc.ClientStream
}

type multiSessionChatServerSenderStreamClient struct {
	grpc.ClientStream
}

func (x *multiSessionChatServerSenderStreamClient) Send(m *UserMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiSessionChatServerSenderStreamClient) Recv() (*RecvOk, error) {
	m := new(RecvOk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *multiSessionChatServerClient) RecvrStream(ctx context.Context, opts ...grpc.CallOption) (MultiSessionChatServer_RecvrStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiSessionChatServer_serviceDesc.Streams[1], "/protos.MultiSessionChatServer/recvrStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiSessionChatServerRecvrStreamClient{stream}
	return x, nil
}

type MultiSessionChatServer_RecvrStreamClient interface {
	Send(*RecvOk) error
	Recv() (*UserMessage, error)
	grpc.ClientStream
}

type multiSessionChatServerRecvrStreamClient struct {
	grpc.ClientStream
}

func (x *multiSessionChatServerRecvrStreamClient) Send(m *RecvOk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiSessionChatServerRecvrStreamClient) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiSessionChatServerServer is the server API for MultiSessionChatServer service.
type MultiSessionChatServerServer interface {
	RequestServer(context.Context, *UserRequest) (*UserReqResponse, error)
	SenderStream(MultiSessionChatServer_SenderStreamServer) error
	RecvrStream(MultiSessionChatServer_RecvrStreamServer) error
}

// UnimplementedMultiSessionChatServerServer can be embedded to have forward compatible implementations.
type UnimplementedMultiSessionChatServerServer struct {
}

func (*UnimplementedMultiSessionChatServerServer) RequestServer(ctx context.Context, req *UserRequest) (*UserReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestServer not implemented")
}
func (*UnimplementedMultiSessionChatServerServer) SenderStream(srv MultiSessionChatServer_SenderStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SenderStream not implemented")
}
func (*UnimplementedMultiSessionChatServerServer) RecvrStream(srv MultiSessionChatServer_RecvrStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvrStream not implemented")
}

func RegisterMultiSessionChatServerServer(s *grpc.Server, srv MultiSessionChatServerServer) {
	s.RegisterService(&_MultiSessionChatServer_serviceDesc, srv)
}

func _MultiSessionChatServer_RequestServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiSessionChatServerServer).RequestServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MultiSessionChatServer/RequestServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiSessionChatServerServer).RequestServer(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiSessionChatServer_SenderStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiSessionChatServerServer).SenderStream(&multiSessionChatServerSenderStreamServer{stream})
}

type MultiSessionChatServer_SenderStreamServer interface {
	Send(*RecvOk) error
	Recv() (*UserMessage, error)
	grpc.ServerStream
}

type multiSessionChatServerSenderStreamServer struct {
	grpc.ServerStream
}

func (x *multiSessionChatServerSenderStreamServer) Send(m *RecvOk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiSessionChatServerSenderStreamServer) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MultiSessionChatServer_RecvrStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiSessionChatServerServer).RecvrStream(&multiSessionChatServerRecvrStreamServer{stream})
}

type MultiSessionChatServer_RecvrStreamServer interface {
	Send(*UserMessage) error
	Recv() (*RecvOk, error)
	grpc.ServerStream
}

type multiSessionChatServerRecvrStreamServer struct {
	grpc.ServerStream
}

func (x *multiSessionChatServerRecvrStreamServer) Send(m *UserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiSessionChatServerRecvrStreamServer) Recv() (*RecvOk, error) {
	m := new(RecvOk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MultiSessionChatServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MultiSessionChatServer",
	HandlerType: (*MultiSessionChatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestServer",
			Handler:    _MultiSessionChatServer_RequestServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "senderStream",
			Handler:       _MultiSessionChatServer_SenderStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "recvrStream",
			Handler:       _MultiSessionChatServer_RecvrStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "genericChat.proto",
}
